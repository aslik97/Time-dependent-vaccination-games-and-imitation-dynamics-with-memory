% values for the delays

clear all:
close all;
% define vector with all delays
lags=[20,50,100,150];


for j = 1:length(lags)
        tau = lags(j);
  fprintf('lags(delay parameter): %d\n', tau);
%options = ddeset('MaxStep', 0.01); % Adjust the value as needed
solution = dde23(@(t,y,Z) rhs_dde23(t,y,Z,tau),tau,@(t) dde23history(t,tau), [0,4000]);
disp(solution.y(2,:));

% plot the results
figure
plot(solution.x,solution.y(2,:),'b-','Linewidth',2)
hold on
title('Solution','FontSize',16)
xlabel('time','FontSize',14)
ylim([0 3e-6]);
ylabel('solution','FontSize',14)
legend('x','y','z')
hold off
end

function x_h = dde23history(t, tau)
 persistent saved_I; % Declare a persistent variable to store I
    if t <= tau
        S = rand(); 
        % For t <= tau, use the initial condition for p
        p = 0; % Replace with your desired initial value for p
        
        % Calculate I based on S and p
        I = rand() *(1 - S-p);
        saved_I = I;
    else
       % For t > tau, use the saved value of I
       p = rand() * (1 - S);
       I = saved_I;
    end
    x_h = [S I p];
    end


function xdot = rhs_dde23(t,x,Z,tau)

    k = 400;
    mu = 3.9 * 10^(-5);
    v = 1/7;
    beta = 10 * (mu + v);
    alpha = 0.002;
   
    % Assuming Z corresponds to delayed values of dynamical system at time t-tau
    p_delayed = Z(3); % delayed p for the third differential equation
   
    % function to be integrated 
    f = @(tau) f_function(p_delayed,tau,t);

    % integral function for numerical integration
    result = integral(f, 0, inf);
  
    xdot = [
        mu * (1 - x(3)) - beta * x(1) * x(2) - mu * x(1) ;
        beta * x(1) * x(2) - (mu + v) * x(2);
        k * x(3) * (1 - x(3)) * (1 - alpha * result);% Here, delayed p directly
    ];

end


function f = f_function(p_delayed,tau,t)
 f= p_delayed * dirac(t- tau);

end
